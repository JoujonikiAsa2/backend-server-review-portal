generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                  @id @default(uuid())
  name                  String
  email                 String                  @unique
  password              String
  role                  UserRole                @default(USER)
  imageUrl              String?
  isPremium             Boolean                 @default(false)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  Review                Review[]
  Comment               Comment[]
  PremiumPurchaseReview PremiumPurchaseReview[]
  Payment               Payment[]
  Vote                  Vote[]

  @@map("users")
}

model Review {
  id                    String                  @id @default(uuid())
  title                 String
  description           String
  userId                String
  user                  User                    @relation(fields: [userId], references: [id])
  imageUrl              String
  category              Category
  upVotes               Int                     @default(0)
  downVotes             Int                     @default(0)
  isPremium             Boolean                 @default(false)
  RatingSummary         Int
  Comment               Comment[]
  isPublished           Boolean                 @default(false)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  PremiumPurchaseReview PremiumPurchaseReview[]
  price                 Int?
  Vote                  Vote[]
  Payment Payment[]

  @@map("reviews")
}

model Vote {
  id       String  @id @default(uuid())
  reviewId String
  review   Review  @relation(fields: [reviewId], references: [id])
  userId   String
  user     User    @relation(fields: [userId], references: [id])
  upVote   Boolean @default(false)
  downVote Boolean @default(false)

  @@unique([reviewId, userId])
}

model PremiumPurchaseReview {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  reviewId  String
  review    Review   @relation(fields: [reviewId], references: [id])
  paymentId String   @unique
  payment   Payment  @relation(fields: [paymentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, reviewId])
  @@map("premium_purchase_reviews")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  reviewId  String
  review    Review   @relation(fields: [reviewId], references: [id])

  @@map("comments")
}

model Payment {
  id            String         @id @default(uuid())
  userId        String?
  reviewId      String
  amount        Float
  email         String
  transactionId String?
  paymentStatus PaymentStatus? @default(PENDING)
  paymentType   PaymentType?   @default(PREPAYMENT)
  currency      String?
  paymentMethod String?
  completedAt   DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  Review                Review?                @relation(fields: [reviewId], references: [id])
  User                  User?                  @relation(fields: [userId], references: [id])
  PremiumPurchaseReview PremiumPurchaseReview?
}

enum Category {
  MOVIE
  TV_SHOW
  BOOK
  ELECTRONICS
  VEHICLE
}

enum UserRole {
  USER
  ADMIN
}

enum PaymentType {
  PREPAYMENT
  POSTPAYMENT
}

enum PaymentStatus {
  CONFIRMED
  CANCEL
  FAILED
  PENDING
  REFUND
}
